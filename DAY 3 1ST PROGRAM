def max_profit(prices):
    n = len(prices)
    if n <= 1:
        return 0
    
    # Initialize profit arrays for two transactions
    profit1 = [0] * n
    profit2 = [0] * n
    
    # Calculate profit from the first transaction
    min_price = prices[0]
    for i in range(1, n):
        profit1[i] = max(profit1[i - 1], prices[i] - min_price)
        min_price = min(min_price, prices[i])
    
    # Calculate profit from the second transaction
    max_price = prices[-1]
    for i in range(n - 2, -1, -1):
        profit2[i] = max(profit2[i + 1], max_price - prices[i])
        max_price = max(max_price, prices[i])
    
    # Calculate the maximum profit with at most 2 transactions
    max_profit = 0
    for i in range(n):
        max_profit = max(max_profit, profit1[i] + profit2[i])
    
    return max_profit

# Test cases
test_cases = [
    [7, 1, 5, 3, 6, 4],
    [7, 6, 4, 3, 1],
    [10, 22, 5, 75, 65, 80],
    [2, 30, 15, 10, 8, 25, 80],
    [10, 22, 5, 75, 65, 80]
]

for prices in test_cases:
    print("Output:", max_profit(prices))

