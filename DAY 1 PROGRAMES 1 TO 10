1.
def isomorphic_strings(s, t):
    if len(s) != len(t):
        return False
    
    mapping = {}
    used_chars = set()
    
    for i in range(len(s)):
        if s[i] in mapping:
            if mapping[s[i]] != t[i]:
                return False
        else:
            if t[i] in used_chars:
                return False
            mapping[s[i]] = t[i]
            used_chars.add(t[i])
    
    return True

# Test cases
print(isomorphic_strings("egg", "add"))      # Output: True
print(isomorphic_strings("foo", "bar"))      # Output: False
print(isomorphic_strings("paper", "title"))  # Output: True
print(isomorphic_strings("fry", "sky"))      # Output: True
print(isomorphic_strings("apples", "apple")) # Output: False


2.
def sumsquare(l):
    odd_sum = 0
    even_sum = 0
    
    for num in l:
        if num % 2 == 0:
            even_sum += num ** 2
        else:
            odd_sum += num ** 2
    
    return [odd_sum, even_sum]

# Sample Input
num_elements = int(input("Enter the number of elements: "))
elements = []
for _ in range(num_elements):
    element = int(input("Enter the element: "))
    elements.append(element)

# Calculate and print the output
output = sumsquare(elements)
print(output)


3.

function isHappy(n):
    seen = set()  # Keep track of seen numbers to detect cycles
    
    while n != 1 and n not in seen:
        seen.add(n)
        n = calculate_next(n)
    
    return n == 1

function calculate_next(n):
    next_num = 0
    while n > 0:
        digit = n % 10
        next_num += digit * digit
        n //= 10
    return next_num
print(isHappy(19))  # Output: True
print(isHappy(2))   # Output: False
print(isHappy(-1))  # Output: False
print(isHappy(0))   # Output: False
print(isHappy(5))   # Output: False



4.

function isPalindrome(x):
    if x < 0:
        return False
    
    original_x = x
    reversed_x = 0
    
    while x > 0:
        digit = x % 10
        reversed_x = reversed_x * 10 + digit
        x //= 10
    
    return original_x == reversed_x
print(isPalindrome(121))   # Output: True
print(isPalindrome(-121))  # Output: False
print(isPalindrome(10))    # Output: False
print(isPalindrome("abc")) # Output: False (Invalid input)
print(isPalindrome(0))     # Output: True
 

5.
def calculate_price(fresh_loaves, day_old_loaves):
    price_per_loaf = 185
    discount_percentage = 60
    
    fresh_loaves_price = fresh_loaves * price_per_loaf
    day_old_loaves_price = day_old_loaves * price_per_loaf * (1 - discount_percentage / 100)
    total_price = fresh_loaves_price + day_old_loaves_price
    
    return fresh_loaves_price, day_old_loaves_price, total_price

# Input
fresh_loaves = int(input("Enter the number of fresh loaves purchased: "))
day_old_loaves = int(input("Enter the number of day old loaves purchased: "))

# Calculate prices
fresh_price, day_old_price, total_price = calculate_price(fresh_loaves, day_old_loaves)

# Output
print("Regular price: Rs.{:.2f}".format(fresh_price))
print("Amount of new loaves: Rs.{:.2f}".format(fresh_price))
print("Amount of day old loaves: Rs.{:.2f}".format(day_old_price))
print("Total amount: Rs.{:.2f}".format(total_price))
print("Test Case 1:")
calculate_price(4, 6)  # Output will be calculated and displayed

print("Test Case 2:")
calculate_price(-1, 5) # Output will be calculated and displayed

print("Test Case 3:")
calculate_price(0, 6)  # Output will be calculated and displayed

print("Test Case 4:")
calculate_price(7, 8)  # Output will be calculated and displayed

print("Test Case 5:")
calculate_price(3, 4)  # Output will be calculated and displayed


6.

def max_area(height):
    left = 0
    right = len(height) - 1
    max_area = 0
    
    while left < right:
        width = right - left
        h = min(height[left], height[right])
        area = width * h
        max_area = max(max_area, area)
        
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    
    return max_area

# Test cases
print(max_area([1, 5, 4, 3]))           # Output: 6
print(max_area([3, 1, 2, 4, 5]))        # Output: 12
print(max_area([1, 8, 6, 2, 5, 4, 8, 3, 7])) # Output: 49
print(max_area([1, 1]))                 # Output: 1
print(max_area([7, 3]))                 # Output: 3



7.

def count_sorted_vowel_strings(n):
    # Using dynamic programming approach
    dp = [[0] * 5 for _ in range(n+1)]
    
    for i in range(5):
        dp[1][i] = 1
    
    for i in range(2, n+1):
        for j in range(5):
            dp[i][j] = sum(dp[i-1][k] for k in range(j, 5))
    
    return sum(dp[n])

# Test cases
print(count_sorted_vowel_strings(1))    # Output: 5
print(count_sorted_vowel_strings(2))    # Output: 15
print(count_sorted_vowel_strings(33))   # Output: 66045
print(count_sorted_vowel_strings(-5))   # Output: 0 (Invalid input)
print(count_sorted_vowel_strings(10))   # Output: 1716


8.
def isNumber(s):
    try:
        float(s)  # Try converting the string to a float
        return True
    except ValueError:
        return False

# Test cases
print(isNumber("0"))    # Output: True
print(isNumber("e"))    # Output: False
print(isNumber(" "))    # Output: False
print(isNumber("."))    # Output: False
print(isNumber("%"))    # Output: False


9.
def max_guests_on_cruise(T, E, L):
    events = []
    
    for i in range(len(E)):
        events.append((E[i], 1))  # Entering guest
        events.append((L[i], -1)) # Leaving guest
    
    events.sort()  # Sort events based on time
    
    max_guests = 0
    current_guests = 0
    
    for event in events:
        current_guests += event[1]
        max_guests = max(max_guests, current_guests)
    
    return max_guests

# Sample Input
T = int(input("Enter the value of T: "))
E = []
L = []
for _ in range(T):
    enter = int(input())
    E.append(enter)
for _ in range(T):
    leave = int(input())
    L.append(leave)

# Calculate and print the output
output = max_guests_on_cruise(T, E, L)
print(output)
print(max_guests_on_cruise(-4, [1, 5, 9, 10], [0, 2, 3, 4]))   # Output: 0 (Invalid input)
print(max_guests_on_cruise(0, [10, 2, 3, 4], [1234]))          # Output: 0 (Invalid input)
print(max_guests_on_cruise(4, [12, 85], [100]))                # Output: 2
print(max_guests_on_cruise(5, [42, 0, 35, 12, 15], [1, 2, 1, 3, 4])) # Output: 6
print(max_guests_on_cruise(1, [12], [10]))                     # Output: 2


10.
def modify_string(s):
    freq = [0] * 26  # Initialize frequency array for alphabets
    
    for char in s:
        freq[ord(char) - ord('a')] += 1
    
    result = []
    
    for char in s:
        new_char = chr(((ord(char) - ord('a') + freq[ord(char) - ord('a')]) % 26) + ord('a'))
        result.append(new_char)
    
    return ''.join(result)

# Test cases
print(modify_string("ghee"))     # Output: hggi
print(modify_string("elephant")) # Output: epehdsgf
print(modify_string("apple"))    # Output: anppe
print(modify_string("orange"))   # Output: opsbwh
print(modify_string("lion"))     # Output: lzqn
